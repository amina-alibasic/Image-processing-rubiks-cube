function [color] = whichColor(croppedImage)
%% Red color segmentation & checking
[~,I] = isRedColor(croppedImage);
pixels = findPixels(I);
if pixels(1) ~= 0 && pixels(2) ~= 0 && pixels(3) ~= 0
       color = 'red';
       return % if one of the colors is detected, exit the function execution
end

%% Blue color segmentation & checking
[~,I] = isBlueColor(croppedImage);
pixels = findPixels(I);
if pixels(1) ~= 0 && pixels(2) ~= 0 && pixels(3) ~= 0
       color = 'blue';
       return
end

%% Green color segmentation & checking
[~,I] = isGreenColor(croppedImage);
pixels = findPixels(I);
if pixels(1) ~= 0 && pixels(2) ~= 0 && pixels(3) ~= 0
       color = 'green';
       return
end

%% White color segmentation & checking
[~,I] = isWhiteColor(croppedImage);
pixels = findPixels(I);
if pixels(1) ~= 0 && pixels(2) ~= 0 && pixels(3) ~= 0
       color = 'white';
       return
end

%% Yellow color segmentation & checking
[~,I] = isYellowColor(croppedImage);
pixels = findPixels(I);
if pixels(1) ~= 0 && pixels(2) ~= 0 && pixels(3) ~= 0
       color = 'yellow';
       return
end
 
%% Orange color segmentation & checking
[~,I] = isOrangeColor(croppedImage);
pixels = findPixels(I);
if pixels(1) ~= 0 && pixels(2) ~= 0 && pixels(3) ~= 0
       color = 'orange';
       return
end
end

%% 
% Functions isWhiteColor(), isRedColor(), etc. are generated by Color
% Thresholder App given by MATLAB. After importing the image from workspace
% or PC, user can choose in which color space will he work in (RGB, HSV, etc.). 
% Then, user can manually set the thresholds for R,G and B values (or Hue, Saturation,
% etc.) with sliders, while seeing the live output of the image. Then, with
% option 'Export function', a function is generated. 
% 
% My idea was to run every cropped image of the squares in Rubik's Cube
% trough the color thresholding, and then find the pixels in the square
% centers. For instance, if the image is thresholded for blue color
% (isBlueColor() function), only the square with blue color with return
% some RGB pixel values higher than 0, because when thresholding 
% for blue color, all other pixel values are turned to black (zero),
% while only those pixel values of specific RGB combination for blue color,
% have values higher than 0. So after thresholding for each color separately,
% it's checked if the pixel values in R,G and B are not equal to 0. If =0, 
% the square sent as a parameter to specific function was not the color we
% are checking for, and if not equal to zero, that was the color that function 
% detected, so set the 'color' variable to color name (which is back in the main
% program set in result matrix).
